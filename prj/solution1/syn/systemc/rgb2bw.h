// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.2
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _rgb2bw_HH_
#define _rgb2bw_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct rgb2bw : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<12> > rgb_rows_V_read;
    sc_in< sc_lv<12> > rgb_cols_V_read;
    sc_in< sc_lv<8> > rgb_data_stream_0_V_dout;
    sc_in< sc_logic > rgb_data_stream_0_V_empty_n;
    sc_out< sc_logic > rgb_data_stream_0_V_read;
    sc_in< sc_lv<8> > rgb_data_stream_1_V_dout;
    sc_in< sc_logic > rgb_data_stream_1_V_empty_n;
    sc_out< sc_logic > rgb_data_stream_1_V_read;
    sc_in< sc_lv<8> > rgb_data_stream_2_V_dout;
    sc_in< sc_logic > rgb_data_stream_2_V_empty_n;
    sc_out< sc_logic > rgb_data_stream_2_V_read;
    sc_out< sc_lv<8> > bw_data_stream_0_V_din;
    sc_in< sc_logic > bw_data_stream_0_V_full_n;
    sc_out< sc_logic > bw_data_stream_0_V_write;


    // Module declarations
    rgb2bw(sc_module_name name);
    SC_HAS_PROCESS(rgb2bw);

    ~rgb2bw();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_lv<12> > t_V_reg_96;
    sc_signal< bool > ap_sig_bdd_47;
    sc_signal< sc_lv<12> > i_V_fu_113_p2;
    sc_signal< sc_lv<12> > i_V_reg_181;
    sc_signal< sc_lv<1> > exitcond_fu_119_p2;
    sc_signal< sc_lv<1> > exitcond_reg_186;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< bool > ap_sig_bdd_71;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_reg_186_pp0_it1;
    sc_signal< bool > ap_sig_bdd_79;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it2;
    sc_signal< sc_lv<12> > j_V_fu_124_p2;
    sc_signal< sc_lv<10> > tmp_6_fu_152_p2;
    sc_signal< sc_lv<10> > tmp_6_reg_195;
    sc_signal< sc_lv<1> > exitcond4_fu_108_p2;
    sc_signal< sc_lv<12> > t_V_2_reg_85;
    sc_signal< sc_lv<9> > tmp_cast_121_fu_134_p1;
    sc_signal< sc_lv<9> > tmp_cast_fu_130_p1;
    sc_signal< sc_lv<9> > tmp_5_fu_142_p2;
    sc_signal< sc_lv<10> > tmp_5_cast_fu_148_p1;
    sc_signal< sc_lv<10> > tmp_4_cast_fu_138_p1;
    sc_signal< sc_lv<1> > not_s_fu_158_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_st1_fsm_0;
    static const sc_lv<2> ap_ST_st2_fsm_1;
    static const sc_lv<2> ap_ST_pp0_stg0_fsm_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<10> ap_const_lv10_F9;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_47();
    void thread_ap_sig_bdd_71();
    void thread_ap_sig_bdd_79();
    void thread_bw_data_stream_0_V_din();
    void thread_bw_data_stream_0_V_write();
    void thread_exitcond4_fu_108_p2();
    void thread_exitcond_fu_119_p2();
    void thread_i_V_fu_113_p2();
    void thread_j_V_fu_124_p2();
    void thread_not_s_fu_158_p2();
    void thread_rgb_data_stream_0_V_read();
    void thread_rgb_data_stream_1_V_read();
    void thread_rgb_data_stream_2_V_read();
    void thread_tmp_4_cast_fu_138_p1();
    void thread_tmp_5_cast_fu_148_p1();
    void thread_tmp_5_fu_142_p2();
    void thread_tmp_6_fu_152_p2();
    void thread_tmp_cast_121_fu_134_p1();
    void thread_tmp_cast_fu_130_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
