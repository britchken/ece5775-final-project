-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rgb2bw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rgb_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    rgb_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    rgb_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    rgb_data_stream_0_V_empty_n : IN STD_LOGIC;
    rgb_data_stream_0_V_read : OUT STD_LOGIC;
    rgb_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    rgb_data_stream_1_V_empty_n : IN STD_LOGIC;
    rgb_data_stream_1_V_read : OUT STD_LOGIC;
    rgb_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    rgb_data_stream_2_V_empty_n : IN STD_LOGIC;
    rgb_data_stream_2_V_read : OUT STD_LOGIC;
    bw_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    bw_data_stream_0_V_full_n : IN STD_LOGIC;
    bw_data_stream_0_V_write : OUT STD_LOGIC );
end;


architecture behav of rgb2bw is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv10_F9 : STD_LOGIC_VECTOR (9 downto 0) := "0011111001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal t_V_reg_96 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_bdd_47 : BOOLEAN;
    signal i_V_fu_113_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_V_reg_181 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_186 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_71 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_186_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_79 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal j_V_fu_124_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_fu_152_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_reg_195 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond4_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_2_reg_85 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_121_fu_134_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_fu_130_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_142_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_cast_fu_148_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_cast_fu_138_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal not_s_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal not_s_fu_158_p2_temp: signed (1-1 downto 0);


begin



    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_108_p2)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_71 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((exitcond_fu_119_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond4_fu_108_p2))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_71 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and (exitcond_fu_119_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond4_fu_108_p2)) or ((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_71 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((exitcond_fu_119_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_71 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond4_fu_108_p2))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- t_V_2_reg_85 assign process. --
    t_V_2_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_71 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((exitcond_fu_119_p2 = ap_const_lv1_0)))) then 
                t_V_2_reg_85 <= i_V_reg_181;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_47))) then 
                t_V_2_reg_85 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- t_V_reg_96 assign process. --
    t_V_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond4_fu_108_p2))) then 
                t_V_reg_96 <= ap_const_lv12_0;
            elsif (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_71 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and (exitcond_fu_119_p2 = ap_const_lv1_0))) then 
                t_V_reg_96 <= j_V_fu_124_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_71 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then
                ap_reg_ppstg_exitcond_reg_186_pp0_it1 <= exitcond_reg_186;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_71 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then
                exitcond_reg_186 <= exitcond_fu_119_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                i_V_reg_181 <= i_V_fu_113_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_71 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then
                tmp_6_reg_195 <= tmp_6_fu_152_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm , ap_sig_bdd_47 , exitcond_fu_119_p2 , ap_reg_ppiten_pp0_it0 , ap_sig_bdd_71 , ap_reg_ppiten_pp0_it1 , ap_sig_bdd_79 , ap_reg_ppiten_pp0_it2 , exitcond4_fu_108_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_47)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_108_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not(((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_71 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_71 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((exitcond_fu_119_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif ((((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_71 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_71 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((exitcond_fu_119_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm, exitcond4_fu_108_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_108_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond4_fu_108_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_108_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_47 assign process. --
    ap_sig_bdd_47_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_47 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_71 assign process. --
    ap_sig_bdd_71_assign_proc : process(rgb_data_stream_0_V_empty_n, rgb_data_stream_1_V_empty_n, rgb_data_stream_2_V_empty_n, exitcond_reg_186)
    begin
                ap_sig_bdd_71 <= (((rgb_data_stream_0_V_empty_n = ap_const_logic_0) and (exitcond_reg_186 = ap_const_lv1_0)) or ((exitcond_reg_186 = ap_const_lv1_0) and (rgb_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_186 = ap_const_lv1_0) and (rgb_data_stream_2_V_empty_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_79 assign process. --
    ap_sig_bdd_79_assign_proc : process(bw_data_stream_0_V_full_n, ap_reg_ppstg_exitcond_reg_186_pp0_it1)
    begin
                ap_sig_bdd_79 <= ((bw_data_stream_0_V_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it1));
    end process;

    
    not_s_fu_158_p2_temp <= signed(not_s_fu_158_p2);
    bw_data_stream_0_V_din <= std_logic_vector(resize(not_s_fu_158_p2_temp,8));


    -- bw_data_stream_0_V_write assign process. --
    bw_data_stream_0_V_write_assign_proc : process(ap_CS_fsm, ap_sig_bdd_71, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_reg_186_pp0_it1, ap_sig_bdd_79, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_186_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_71 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            bw_data_stream_0_V_write <= ap_const_logic_1;
        else 
            bw_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond4_fu_108_p2 <= "1" when (t_V_2_reg_85 = rgb_rows_V_read) else "0";
    exitcond_fu_119_p2 <= "1" when (t_V_reg_96 = rgb_cols_V_read) else "0";
    i_V_fu_113_p2 <= std_logic_vector(unsigned(t_V_2_reg_85) + unsigned(ap_const_lv12_1));
    j_V_fu_124_p2 <= std_logic_vector(unsigned(t_V_reg_96) + unsigned(ap_const_lv12_1));
    not_s_fu_158_p2 <= "1" when (unsigned(tmp_6_reg_195) > unsigned(ap_const_lv10_F9)) else "0";

    -- rgb_data_stream_0_V_read assign process. --
    rgb_data_stream_0_V_read_assign_proc : process(ap_CS_fsm, exitcond_reg_186, ap_sig_bdd_71, ap_reg_ppiten_pp0_it1, ap_sig_bdd_79, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_71 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            rgb_data_stream_0_V_read <= ap_const_logic_1;
        else 
            rgb_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- rgb_data_stream_1_V_read assign process. --
    rgb_data_stream_1_V_read_assign_proc : process(ap_CS_fsm, exitcond_reg_186, ap_sig_bdd_71, ap_reg_ppiten_pp0_it1, ap_sig_bdd_79, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_71 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            rgb_data_stream_1_V_read <= ap_const_logic_1;
        else 
            rgb_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- rgb_data_stream_2_V_read assign process. --
    rgb_data_stream_2_V_read_assign_proc : process(ap_CS_fsm, exitcond_reg_186, ap_sig_bdd_71, ap_reg_ppiten_pp0_it1, ap_sig_bdd_79, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond_reg_186 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_71 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_79 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            rgb_data_stream_2_V_read <= ap_const_logic_1;
        else 
            rgb_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_4_cast_fu_138_p1 <= std_logic_vector(resize(unsigned(rgb_data_stream_2_V_dout),10));
    tmp_5_cast_fu_148_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_142_p2),10));
    tmp_5_fu_142_p2 <= std_logic_vector(unsigned(tmp_cast_121_fu_134_p1) + unsigned(tmp_cast_fu_130_p1));
    tmp_6_fu_152_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_148_p1) + unsigned(tmp_4_cast_fu_138_p1));
    tmp_cast_121_fu_134_p1 <= std_logic_vector(resize(unsigned(rgb_data_stream_1_V_dout),9));
    tmp_cast_fu_130_p1 <= std_logic_vector(resize(unsigned(rgb_data_stream_0_V_dout),9));
end behav;
