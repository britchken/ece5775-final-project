// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.2
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rgb2bw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rgb_rows_V_read,
        rgb_cols_V_read,
        rgb_data_stream_0_V_dout,
        rgb_data_stream_0_V_empty_n,
        rgb_data_stream_0_V_read,
        rgb_data_stream_1_V_dout,
        rgb_data_stream_1_V_empty_n,
        rgb_data_stream_1_V_read,
        rgb_data_stream_2_V_dout,
        rgb_data_stream_2_V_empty_n,
        rgb_data_stream_2_V_read,
        bw_data_stream_0_V_din,
        bw_data_stream_0_V_full_n,
        bw_data_stream_0_V_write
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [11:0] rgb_rows_V_read;
input  [11:0] rgb_cols_V_read;
input  [7:0] rgb_data_stream_0_V_dout;
input   rgb_data_stream_0_V_empty_n;
output   rgb_data_stream_0_V_read;
input  [7:0] rgb_data_stream_1_V_dout;
input   rgb_data_stream_1_V_empty_n;
output   rgb_data_stream_1_V_read;
input  [7:0] rgb_data_stream_2_V_dout;
input   rgb_data_stream_2_V_empty_n;
output   rgb_data_stream_2_V_read;
output  [7:0] bw_data_stream_0_V_din;
input   bw_data_stream_0_V_full_n;
output   bw_data_stream_0_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rgb_data_stream_0_V_read;
reg rgb_data_stream_1_V_read;
reg rgb_data_stream_2_V_read;
reg bw_data_stream_0_V_write;
reg    ap_done_reg = 1'b0;
reg   [1:0] ap_CS_fsm = 2'b00;
reg   [11:0] t_V_reg_96;
reg    ap_sig_bdd_47;
wire   [11:0] i_V_fu_113_p2;
reg   [11:0] i_V_reg_181;
wire   [0:0] exitcond_fu_119_p2;
reg   [0:0] exitcond_reg_186;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_sig_bdd_71;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_reg_186_pp0_it1;
reg    ap_sig_bdd_79;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
wire   [11:0] j_V_fu_124_p2;
wire   [9:0] tmp_6_fu_152_p2;
reg   [9:0] tmp_6_reg_195;
wire   [0:0] exitcond4_fu_108_p2;
reg   [11:0] t_V_2_reg_85;
wire   [8:0] tmp_cast_121_fu_134_p1;
wire   [8:0] tmp_cast_fu_130_p1;
wire   [8:0] tmp_5_fu_142_p2;
wire   [9:0] tmp_5_cast_fu_148_p1;
wire   [9:0] tmp_4_cast_fu_138_p1;
wire   [0:0] not_s_fu_158_p2;
reg   [1:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b00;
parameter    ap_ST_st2_fsm_1 = 2'b1;
parameter    ap_ST_pp0_stg0_fsm_2 = 2'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv12_1 = 12'b1;
parameter    ap_const_lv10_F9 = 10'b11111001;
parameter    ap_true = 1'b1;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond4_fu_108_p2))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~((ap_sig_bdd_71 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_79 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) & ~(exitcond_fu_119_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond4_fu_108_p2))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~((ap_sig_bdd_71 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_79 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) & (exitcond_fu_119_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond4_fu_108_p2)) | ((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~((ap_sig_bdd_71 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_79 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) & ~(exitcond_fu_119_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~((ap_sig_bdd_71 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_79 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond4_fu_108_p2))) begin
            ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_71 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_79 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) & ~(exitcond_fu_119_p2 == ap_const_lv1_0))) begin
        t_V_2_reg_85 <= i_V_reg_181;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_47)) begin
        t_V_2_reg_85 <= ap_const_lv12_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond4_fu_108_p2))) begin
        t_V_reg_96 <= ap_const_lv12_0;
    end else if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_71 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_79 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) & (exitcond_fu_119_p2 == ap_const_lv1_0))) begin
        t_V_reg_96 <= j_V_fu_124_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~((ap_sig_bdd_71 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_79 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        ap_reg_ppstg_exitcond_reg_186_pp0_it1 <= exitcond_reg_186;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_71 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_79 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        exitcond_reg_186 <= exitcond_fu_119_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        i_V_reg_181 <= i_V_fu_113_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (exitcond_reg_186 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_71 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_79 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        tmp_6_reg_195 <= tmp_6_fu_152_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_CS_fsm or exitcond4_fu_108_p2)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond4_fu_108_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or exitcond4_fu_108_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond4_fu_108_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// bw_data_stream_0_V_write assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_71 or ap_reg_ppiten_pp0_it1 or ap_reg_ppstg_exitcond_reg_186_pp0_it1 or ap_sig_bdd_79 or ap_reg_ppiten_pp0_it2)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_sig_bdd_71 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_79 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        bw_data_stream_0_V_write = ap_const_logic_1;
    end else begin
        bw_data_stream_0_V_write = ap_const_logic_0;
    end
end

/// rgb_data_stream_0_V_read assign process. ///
always @ (ap_CS_fsm or exitcond_reg_186 or ap_sig_bdd_71 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_79 or ap_reg_ppiten_pp0_it2)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (exitcond_reg_186 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_71 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_79 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        rgb_data_stream_0_V_read = ap_const_logic_1;
    end else begin
        rgb_data_stream_0_V_read = ap_const_logic_0;
    end
end

/// rgb_data_stream_1_V_read assign process. ///
always @ (ap_CS_fsm or exitcond_reg_186 or ap_sig_bdd_71 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_79 or ap_reg_ppiten_pp0_it2)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (exitcond_reg_186 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_71 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_79 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        rgb_data_stream_1_V_read = ap_const_logic_1;
    end else begin
        rgb_data_stream_1_V_read = ap_const_logic_0;
    end
end

/// rgb_data_stream_2_V_read assign process. ///
always @ (ap_CS_fsm or exitcond_reg_186 or ap_sig_bdd_71 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_79 or ap_reg_ppiten_pp0_it2)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (exitcond_reg_186 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_71 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_79 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        rgb_data_stream_2_V_read = ap_const_logic_1;
    end else begin
        rgb_data_stream_2_V_read = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm or ap_sig_bdd_47 or exitcond_fu_119_p2 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_71 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_79 or ap_reg_ppiten_pp0_it2 or exitcond4_fu_108_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~ap_sig_bdd_47) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if (~(ap_const_lv1_0 == exitcond4_fu_108_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end
        ap_ST_pp0_stg0_fsm_2 : 
            if ((~((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_sig_bdd_71 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_79 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_71 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_79 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) & ~(exitcond_fu_119_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end else if ((((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_sig_bdd_71 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_79 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_71 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_79 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) & ~(exitcond_fu_119_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end
        default : 
            ap_NS_fsm = 'bx;
    endcase
end

/// ap_sig_bdd_47 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_47 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_71 assign process. ///
always @ (rgb_data_stream_0_V_empty_n or rgb_data_stream_1_V_empty_n or rgb_data_stream_2_V_empty_n or exitcond_reg_186)
begin
    ap_sig_bdd_71 = (((rgb_data_stream_0_V_empty_n == ap_const_logic_0) & (exitcond_reg_186 == ap_const_lv1_0)) | ((exitcond_reg_186 == ap_const_lv1_0) & (rgb_data_stream_1_V_empty_n == ap_const_logic_0)) | ((exitcond_reg_186 == ap_const_lv1_0) & (rgb_data_stream_2_V_empty_n == ap_const_logic_0)));
end

/// ap_sig_bdd_79 assign process. ///
always @ (bw_data_stream_0_V_full_n or ap_reg_ppstg_exitcond_reg_186_pp0_it1)
begin
    ap_sig_bdd_79 = ((bw_data_stream_0_V_full_n == ap_const_logic_0) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_186_pp0_it1));
end
assign bw_data_stream_0_V_din = $signed(not_s_fu_158_p2);
assign exitcond4_fu_108_p2 = (t_V_2_reg_85 == rgb_rows_V_read? 1'b1: 1'b0);
assign exitcond_fu_119_p2 = (t_V_reg_96 == rgb_cols_V_read? 1'b1: 1'b0);
assign i_V_fu_113_p2 = (t_V_2_reg_85 + ap_const_lv12_1);
assign j_V_fu_124_p2 = (t_V_reg_96 + ap_const_lv12_1);
assign not_s_fu_158_p2 = (tmp_6_reg_195 > ap_const_lv10_F9? 1'b1: 1'b0);
assign tmp_4_cast_fu_138_p1 = $unsigned(rgb_data_stream_2_V_dout);
assign tmp_5_cast_fu_148_p1 = $unsigned(tmp_5_fu_142_p2);
assign tmp_5_fu_142_p2 = (tmp_cast_121_fu_134_p1 + tmp_cast_fu_130_p1);
assign tmp_6_fu_152_p2 = (tmp_5_cast_fu_148_p1 + tmp_4_cast_fu_138_p1);
assign tmp_cast_121_fu_134_p1 = $unsigned(rgb_data_stream_1_V_dout);
assign tmp_cast_fu_130_p1 = $unsigned(rgb_data_stream_0_V_dout);


endmodule //rgb2bw

